---
permalink: sw.js
---

const DYNAMIC_CACHE = "dynamic";
const STATIC_CACHE = "preload-static-{{pkg.version}}-{% currentTime %}";

self.addEventListener("install", (event) => {
  event.waitUntil(
    (async function () {
      const cache = await caches.open(STATIC_CACHE);
      await cache.addAll([
        "/offline",
        "/manifest.json",
        {% for format, images in meta.favicon | imageData -%}
          "{{(images|last).url}}",
        {% endfor -%}
        {%- for format, images in "assets/img/me.jpg" | imageData -%}
          "{{(images|last).url}}",
        {% endfor -%}
      ]);
    })()
  );
});

self.addEventListener("activate", function (event) {
  event.waitUntil(
    caches.keys().then(function (cacheNames) {
      return Promise.all(
        cacheNames
          .filter((cacheName) =>
            ![STATIC_CACHE, DYNAMIC_CACHE].includes(cacheName)
          )
          .map(function (cacheName) {
            return caches.delete(cacheName);
          })
      );
    })
  );
});

self.addEventListener('fetch', function (event) {
  event.respondWith(
    caches.open('dynamic').then(function (cache) {
      return cache.match(event.request).then(function (response) {
        var fetchPromise = fetch(event.request).then(function (networkResponse) {
          cache.put(event.request, networkResponse.clone());
          return networkResponse;
        });
        return response || fetchPromise;
      });
    }),
  );
});
