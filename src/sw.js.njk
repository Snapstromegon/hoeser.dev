---
permalink: sw.js
---

const DYNAMIC_CACHE = "dynamic";
const STATIC_CACHE = "preload-static-{{pkg.version}}-{% currentTime %}";

self.addEventListener("install", (event) => {
  event.waitUntil(
    (async function () {
      const cache = await caches.open(STATIC_CACHE);
      await cache.addAll([
        "/offline",
        "/manifest.json",
        {% for format, images in meta.favicon | imageData -%}
          "{{(images|last).url}}",
        {% endfor -%}
        {%- for format, images in "assets/img/me.jpg" | imageData -%}
          "{{(images|last).url}}",
        {% endfor -%}
      ]);
    })()
  );
});

self.addEventListener("activate", function (event) {
  event.waitUntil(
    caches.keys().then(function (cacheNames) {
      return Promise.all(
        cacheNames
          .filter((cacheName) =>
            ![STATIC_CACHE, DYNAMIC_CACHE].includes(cacheName)
          )
          .map(function (cacheName) {
            return caches.delete(cacheName);
          })
      );
    })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(async function() {
    const cachedResponse = await caches.match(event.request);
    if (cachedResponse) return cachedResponse;

    try {
      const response = await fetch(event.request);
      return response;
    } catch (err) {
      if(event.request.mode == "navigate"){
        return cleanResponse(await caches.match('/offline'));
      }
    }
  }());
});

function cleanResponse(response) {
  const clonedResponse = response.clone();

  // Not all browsers support the Response.body stream, so fall back to reading
  // the entire body into memory as a blob.
  const bodyPromise = 'body' in clonedResponse ?
    Promise.resolve(clonedResponse.body) :
    clonedResponse.blob();

  return bodyPromise.then((body) => {
    // new Response() is happy when passed either a stream or a Blob.
    return new Response(body, {
      headers: clonedResponse.headers,
      status: clonedResponse.status,
      statusText: clonedResponse.statusText,
    });
  });
}
